tasks.register('check') {
    gradle.includedBuilds.each { included ->
        dependsOn(included.task(':check'))
    }
}

tasks.register('allTests')

gradle.afterProject { project, _ ->
    def aggregate = project.rootProject.tasks.named('allTests')
    ['test', 'integration', 'cftlibTest'].each { taskName ->
        project.tasks.matching { it.name == taskName }.configureEach { task ->
            if ((project.path == ':nfdiv' && taskName == 'cftlibTest')
                || (project.path == ':sptribs' && taskName == 'cftlibTest')
                || project.path == ':ccd-data-store-api') {
                return
            }
            aggregate.configure { dependsOn(task) }
        }
    }
}

tasks.register('publishToMavenLocal') { task ->
    gradle.includedBuilds.each { included ->
        task.dependsOn(included.task(':publishToMavenLocal'))
    }
    subprojects.each { subproject ->
        task.dependsOn(subproject.tasks.matching { it.name == 'publishToMavenLocal' })
    }
}

tasks.register('publishToAzureArtifacts') { task ->
    gradle.includedBuilds.each { included ->
        task.dependsOn(included.task(':publishToAzureArtifacts'))
    }
    subprojects.each { subproject ->
        task.dependsOn(
            subproject.tasks.matching { it.name.endsWith('ToAzureArtifactsRepository') }
        )
    }
}

afterEvaluate {
    subprojects.each { subproject ->
        if (subproject.tasks.findByName('check')) {
            tasks.check.dependsOn subproject.tasks.check
        }
    }
}

subprojects.each { subproject ->
    subproject.afterEvaluate {
        it.tasks.each {
            if (it.name.equals("writeManifestRuntime")) {
                it.dependsOn gradle.includedBuild('sdk').task(':ccd-config-generator:jar')
                it.dependsOn gradle.includedBuild('sdk').task(':decentralised-runtime:jar')
            }
        }
    }
}

// Local dev setup; soft dependency on data store is used overriding cftlib version if present.
if (project.findProject(':ccd-data-store-api')) {
    subprojects.each { subproject ->
        subproject.afterEvaluate {
            it.tasks.each {
                if (it.name.equals("writeManifestccd-data-store-api")) {
                    it.dependsOn(':ccd-data-store-api:jar')
                }
            }
        }
    }
}
