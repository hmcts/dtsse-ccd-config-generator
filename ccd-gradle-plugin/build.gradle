/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0.1/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'groovy'
    id 'java-gradle-plugin'
    id 'com.gradle.plugin-publish' version '0.15.0'
}

group 'uk.gov.hmcts.reform'

repositories {
  jcenter()
  mavenCentral()
}

dependencies {
    // Use JUnit test framework for unit tests
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.20'
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.20'
    implementation 'com.google.guava:guava:30.1.1-jre'

    // Ensure we run the plugin's tests when the libraries are modified.
    testImplementation project(':ccd-config-generator')


    testImplementation 'junit:junit:4.13.2'
    testImplementation group: 'commons-io', name: 'commons-io', version: '2.11.0'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.20.2'
}

// Pack the generator into the plugin JAR
// for the plugin to add to the consuming project's build.
processResources {
    into("generator") {
        from project(':ccd-config-generator').tasks.zipGenerator
    }
}


pluginBundle {
    website = 'https://github.com/hmcts/ccd-config-generator'
    vcsUrl = 'https://github.com/hmcts/ccd-config-generator'
    tags = ['hmcts']
}

ext['gradle.publish.key'] = System.getenv('GRADLE_PLUGIN_PORTAL_KEY')
ext['gradle.publish.secret'] = System.getenv('GRADLE_PLUGIN_PORTAL_SECRET')

gradlePlugin {
    // Define the plugin
    plugins {
        greeting {
            id = 'hmcts.ccd.sdk'
            displayName = 'CCD Config Generator'
            description = 'Generate CCD Configuration from code'
            implementationClass = 'uk.gov.hmcts.ccd.sdk.CcdSdkPlugin'
        }
    }
}

compileJava {
    options.compilerArgs += ["-Werror"]
}

sourceSets {
  functionalTest {
  }
}

task setVersion {
    doLast {
        def resources = file('src/main/resources')
        resources.mkdirs()
        def props = new File(resources, 'application.properties')
        props.text = "types.version=${version}"
    }
}

compileJava.dependsOn setVersion

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

functionalTest.inputs.dir file('test-projects')

check {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

functionalTest.mustRunAfter test
