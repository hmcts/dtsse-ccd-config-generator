/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0.1/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'groovy'
    id 'java-gradle-plugin'
    id 'maven-publish'
}

group 'com.github.hmcts.rse-cft-lib'

repositories {
  mavenCentral()
}

dependencies {
    // Ensure we run the plugin's tests when the libraries are modified.
    testImplementation project(':ccd-config-generator')

    testImplementation 'junit:junit:4.13.2'
    testImplementation group: 'commons-io', name: 'commons-io', version: '2.20.0'
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

jar {
    manifest {
        attributes('Implementation-Version': project.version)
    }
}

gradlePlugin {
    website = 'https://github.com/hmcts/ccd-config-generator'
    vcsUrl = 'https://github.com/hmcts/ccd-config-generator'
    plugins {
        greeting {
            id = 'hmcts.ccd.sdk'
            displayName = 'CCD Config Generator'
            description = 'Generate CCD Configuration from code'
            implementationClass = 'uk.gov.hmcts.ccd.sdk.CcdSdkPlugin'
            tags = ['hmcts']
        }
    }
}

sourceSets {
  functionalTest {
  }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

functionalTest.dependsOn(
    project(':ccd-config-generator').tasks.named('publishToMavenLocal'),
    project(':decentralised-runtime').tasks.named('publishToMavenLocal'),
    project(':ccd-servicebus-support').tasks.named('publishToMavenLocal')
)

functionalTest.inputs.dir file('test-projects')

check {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

functionalTest.mustRunAfter test
