plugins {
    id("io.freefair.lombok") version "8.14.2" apply(false)
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'io.freefair.lombok'

    version System.getenv('RELEASE_VERSION')?.replace('refs/tags/', '') ?: 'DEV-SNAPSHOT'

    compileJava   {
        sourceCompatibility = 17
        targetCompatibility = 17
        options.compilerArgs += ["-Werror"]
    }

    checkstyle {
        maxWarnings = 0
        toolVersion '10.23.1'
        sourceSets = [project.sourceSets.main]
    }

    group = 'com.github.hmcts'
    repositories {
        mavenCentral()
        maven {
            url 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1'
        }
    }

    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    java {
        withJavadocJar()
        withSourcesJar()
    }

    publishing {
        publications {
            Main(MavenPublication) {
                from components.java
                groupId 'com.github.hmcts'
                artifactId project.name
                version version
            }
        }
        repositories {
            mavenLocal()
            maven {
                name = 'AzureArtifacts'
                url = uri('https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1')
                credentials {
                    username = System.getenv('AZURE_DEVOPS_ARTIFACT_USERNAME')
                    password = System.getenv('AZURE_DEVOPS_ARTIFACT_TOKEN')
                }
            }
        }
    }
}

tasks.register('check') {
    dependsOn(':ccd-config-generator:check')
    dependsOn(':ccd-gradle-plugin:check')
}

tasks.register('publishToMavenLocal') {
    subprojects.each { subproject ->
        subproject.tasks.matching { it.name == 'publishToMavenLocal' }
            .configureEach { dependsOn(it) }
    }
}

tasks.register('publishToAzureArtifacts') {
    subprojects.each { subproject ->
        subproject.tasks.matching { it.name.endsWith('ToAzureArtifactsRepository') }
            .configureEach { dependsOn(it) }
    }
}
